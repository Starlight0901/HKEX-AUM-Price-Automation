# -*- coding: utf-8 -*-
"""btc_holdings_all.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WGYKQOKn9B5u_xQPhqJ2SbKe5thiOV2z
"""

# !pip install selenium

# !pip install bs4

# !pip install lxml



import requests
from bs4 import BeautifulSoup
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import time
import pandas as pd
import numpy as np
from datetime import datetime
import os

"""## **Scrape Bosera data (9008)**"""

def fetch_and_store_9008():

    # Selenium setup
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")

    driver = webdriver.Chrome(options=chrome_options)

    # Navigate to the URL
    url_9008 = 'https://www.bosera.com.hk/en-US/products/fund/detail/BTCL'
    driver.get(url_9008)
    time.sleep(5)

    # Get page source after JavaScript has executed
    html = driver.page_source
    soup_9008 = BeautifulSoup(html, 'lxml')

    # Close the Selenium driver
    driver.quit()

    # Extract BTC Holdings
    all_tds_9008 = soup_9008.find_all('td', {'class': 'ant-table-cell'})
    btc_holdings_9008 = all_tds_9008[169].get_text(strip=True)
    btc_holdings_9008 = float(btc_holdings_9008.replace(',', ''))

    # Extract the date
    date_9008 = all_tds_9008[1].get_text(strip=True)
    date_9008 = datetime.strptime(date_9008, '%d/%m/%Y')
    date_9008 = date_9008.strftime('%Y-%m-%d')

    print(date_9008)
    print(btc_holdings_9008)
    print('9008')

    # Return data
    return(date_9008, btc_holdings_9008)

"""## **Scrape ChinaAMC data (9042)**"""

def fetch_and_store_9042():

    # Selenium setup
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")

    driver = webdriver.Chrome(options=chrome_options)

    # Navigate to the URL
    url_9042 = 'https://www.chinaamc.com.hk/product/chinaamc-bitcoin-etf/#Holdings'
    driver.get(url_9042)
    time.sleep(5)

    # Get page source after JavaScript has executed
    html = driver.page_source
    soup_9042 = BeautifulSoup(html, 'lxml')

    # Close the Selenium driver
    driver.quit()

    # Net Asset Value (mil)
    table_nav = soup_9042.find('table', {'class': 'amc-table fund-overview'})
    rows_nav = table_nav.find_all('tr')
    nav = None
    for row in rows_nav:
        cells = row.find_all('td')
        if 'Net Asset Value (mil)' in cells[0].get_text(strip=True):
            nav = cells[1].get_text(strip=True)
            break
    nav = float(nav.replace(',', '')) * 1000000

    # Closing Level
    table_cl = soup_9042.find('table', {'class': 'amc-table index-information'})
    rows_cl = table_cl.find_all('tr')
    closing_level = None
    for row in rows_cl:
        cells = row.find_all('td')
        if 'Closing Level' in cells[0].get_text(strip=True):
            closing_level = cells[1].get_text(strip=True)
            break
    closing_level = float(closing_level.replace(',', ''))

    # Weighting %
    tables = soup_9042.find_all('table', {'class': 'amc-table'})
    table_w = tables[7]
    rows_w = table_w.find_all('tr')
    weighting = None
    for row_w in rows_w:
        cells_w = row_w.find_all('td')
        if cells_w and 'VA BITCOIN CURRENCY' in cells_w[0].get_text(strip=True):
            weighting = cells_w[1].get_text(strip=True)
            break
    weighting = float(weighting)

    # Calculate BTC Holdings
    btc_holdings_9042 = (nav * weighting / 100) / closing_level

    # Extract the date
    all_ps_9042 = soup_9042.find_all('p', {'class': 'as-of-date'})
    date_9042 = all_ps_9042[1].get_text(strip=True).replace('As of ', '')
    date_9042 = datetime.strptime(date_9042, '%d-%m-%Y').strftime('%Y-%m-%d')

    print(date_9042)
    print(btc_holdings_9042)
    print('9042')

    return(date_9042, btc_holdings_9042)

"""## **Scrape and calculate Harvest data (9439)**   """

def fetch_and_store_9439():

    # Step 1: Fetch the BTC price from BOS bitcoin
    url_9008 = 'https://www.bosera.com.hk/en-US/products/fund/detail/BTCL'
    response_9008 = requests.get(url_9008)
    soup_9008 = BeautifulSoup(response_9008.content, 'lxml')

    # Locate the price
    all_tds_9008 = soup_9008.find_all('td', {'class': 'ant-table-cell'})
    price = all_tds_9008[145].get_text(strip=True)
    print(price)
    price = float(price.replace(',', ''))

    # Step 2: Use Selenium to fetch AUM data from HKEX
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(options=chrome_options)

    url_9439 = "https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products/Exchange-Traded-Products-Quote?sym=9439&sc_lang=en"
    driver.get(url_9439)
    time.sleep(5)
    html = driver.page_source
    soup = BeautifulSoup(html, 'html.parser')

    # Find the AUM element
    aum_element_9439 = soup.find('dt', {'class': 'ico_data col_aum'})
    aum_9439 = aum_element_9439.text.strip() if aum_element_9439 else "N/A"

    # Extract and convert AUM to float
    if aum_9439 != "N/A":
        aum_9439 = aum_9439[3:]  # Remove "US$"
        aum_9439 = float(aum_9439[:-1].replace(',', '')) * 1000000

    driver.quit()

    # Calculate BTC Holdings
    btc_holdings_9439 = aum_9439 / price if price != 0 else 0

    # Step 3: Scrape and format the date
    date_9439_element = soup.find('dt', {'class': 'ico_data col_aum_date'})
    date_9439 = date_9439_element.text.strip() if date_9439_element else "N/A"

    if date_9439 != "N/A":
        date_9439 = date_9439.replace('as at ', '').replace('(', '').replace(')', '').strip()
        date_9439 = datetime.strptime(date_9439, '%d %b %Y').strftime('%Y-%m-%d')

    print(date_9439)
    print(btc_holdings_9439)
    print('9439')

    return(date_9439, btc_holdings_9439)

"""## **Get the price from the bosera website**"""

def fetch_price():
    # Selenium setup
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")

    driver = webdriver.Chrome(options=chrome_options)

    # Navigate to the URL
    url_9008 = 'https://www.bosera.com.hk/en-US/products/fund/detail/BTCL'
    driver.get(url_9008)
    time.sleep(5)

    # Get page source after JavaScript has executed
    html = driver.page_source
    soup_9008 = BeautifulSoup(html, 'lxml')

    # Close the Selenium driver
    driver.quit()

    # Extract the price
    all_tds_9008 = soup_9008.find_all('td', {'class': 'ant-table-cell'})
    price = all_tds_9008[145].get_text(strip=True)
    price = float(price.replace(',', ''))

    # Extract the date
    price_date = all_tds_9008[1].get_text(strip=True)
    price_date = datetime.strptime(price_date, '%d/%m/%Y').strftime('%Y-%m-%d')

    return price_date, price

"""## **Store bitcoin holding data in Database**"""

def store_data_in_csv(Data):

    # Path to the CSV file
    csv_file_path = "btc_holdings_data.csv"

    # Load existing data if the CSV exists
    if os.path.exists(csv_file_path):
        df_existing = pd.read_csv(csv_file_path)
    else:
        df_existing = pd.DataFrame(columns=["DATE", "BTC_HOLDINGS_9008", "BTC_HOLDINGS_9042", "BTC_HOLDINGS_9439", "INFLOW_OUTFLOW_9008","INFLOW_OUTFLOW_9042", "INFLOW_OUTFLOW_9439", "PRICE", "VALUE_9008", "VALUE_9042", "VALUE_9439"])

   # Convert new data to a DataFrame
    df_new = pd.DataFrame([Data])


    df_combined = pd.concat([df_existing, df_new])

    # sort by index
    df_combined = df_combined.sort_values(by="DATE").reset_index(drop=True)

    # Calculate inflow/outflow for each type of bitcoin holding
    for holding in ["9008", "9042", "9439"]:
        holding_col = f"BTC_HOLDINGS_{holding}"
        inflow_outflow_col = f"INFLOW_OUTFLOW_{holding}"

        # Ensure numeric values for calculation
        df_combined[holding_col] = pd.to_numeric(df_combined[holding_col], errors="coerce")

        # Calculate the inflow/outflow
        df_combined[inflow_outflow_col] = df_combined[holding_col].diff()

    # Calculate the value for each holding
    for holding in ["9008", "9042", "9439"]:
        holding_col = f"BTC_HOLDINGS_{holding}"
        value_col = f"VALUE_{holding}"

        # Calculate the value (price * holdings)
        df_combined[value_col] = df_combined[holding_col] * df_combined["PRICE"]

    df_combined = df_combined.drop_duplicates(subset=["DATE"], keep="last")
    print(df_combined)

    df_combined.replace("-", np.nan, inplace=True)
    df_combined.fillna(method='ffill', inplace=True)


    # Save the updated DataFrame back to the CSV file
    df_combined.to_csv(csv_file_path, index=False)

"""## **Store price data in Database**"""



def update_price_in_csv(price, price_date):

    csv_file_path="btc_holdings_data.csv"

    """
    Updates the price in the 'PRICE' column where the date matches the given price_date.

    Parameters:
    - price (float): The new price to update.
    - price_date (str): The date (in 'YYYY-MM-DD' format) to match and update the price.
    - csv_file_path (str): Path to the CSV file (default is 'btc_holdings_data.csv').
    """
    # Check if the file exists
    if not os.path.exists(csv_file_path):
        raise FileNotFoundError(f"The file '{csv_file_path}' does not exist.")

    # Load the CSV into a DataFrame
    df = pd.read_csv(csv_file_path)

    # Ensure the DATE column exists
    if "DATE" not in df.columns:
        raise KeyError("'DATE' column is missing in the CSV file.")

    # Update the price where the DATE matches the price_date
    df.loc[df["DATE"] == price_date, "PRICE"] = price

    # Save the updated DataFrame back to the CSV file
    df.to_csv(csv_file_path, index=False)

    print(f"Price updated to {price} for date {price_date} in '{csv_file_path}'.")

"""## **Update the dollar values in the database**"""



def update_dollar_values(price_date):

  csv_file_path="btc_holdings_data.csv"

  # Check if the file exists
  if not os.path.exists(csv_file_path):
    raise FileNotFoundError(f"The file '{csv_file_path}' does not exist.")

  # Load the CSV into a DataFrame
  df = pd.read_csv(csv_file_path)

  # Ensure the DATE column exists
  if "DATE" not in df.columns:
      raise KeyError("'DATE' column is missing in the CSV file.")


  # Calculate the value for each holding
  df.loc[df["DATE"] == price_date]
  for holding in ["9008", "9042", "9439"]:
      inflow_outflow_col = f"INFLOW_OUTFLOW_{holding}"
      value_col = f"VALUE_{holding}"

      # Calculate the value (inflow_outflow * holdings) for the matching price_date
      df.loc[df["DATE"] == price_date, value_col] = df.loc[df["DATE"] == price_date, inflow_outflow_col] * df["PRICE"]


  # Save the updated DataFrame back to the CSV file
  df.to_csv(csv_file_path, index=False)

  print(f"Dollar values updated to {price} for date {price_date} in '{csv_file_path}'.")

"""## **Run Functions**"""

date_9008, btc_holdings_9008 = fetch_and_store_9008()

date_9042, btc_holdings_9042 = fetch_and_store_9042()

date_9439, btc_holdings_9439 = fetch_and_store_9439()

price_date, price = fetch_price()

print(date_9008, btc_holdings_9008)
print(date_9042, btc_holdings_9042)
print(date_9439, btc_holdings_9439)

Data = {
        "DATE": date_9008,
        "BTC_HOLDINGS_9008": btc_holdings_9008,
        "BTC_HOLDINGS_9042": btc_holdings_9042,
        "BTC_HOLDINGS_9439": btc_holdings_9439,
        "INFLOW_OUTFLOW_9008": "",
        "INFLOW_OUTFLOW_9042": "",
        "INFLOW_OUTFLOW_9439": "",
        "PRICE": price,
        "VALUE_9008": "",
        "VALUE_9042": "",
        "VALUE_9439": "",
        }

store_data_in_csv(Data)

update_price_in_csv(price, price_date)

# Call this function at the end
update_dollar_values(price_date)

